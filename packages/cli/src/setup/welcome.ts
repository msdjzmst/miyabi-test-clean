/**
 * Welcome Issue creation module
 *
 * Creates an initial welcome Issue to demonstrate automation
 */

import { Octokit } from '@octokit/rest';

interface WelcomeIssue {
  number: number;
  html_url: string;
}

/**
 * Create welcome Issue with instructions
 */
export async function createWelcomeIssue(
  owner: string,
  repo: string,
  token: string
): Promise<WelcomeIssue> {
  const octokit = new Octokit({ auth: token });

  const { data } = await octokit.issues.create({
    owner,
    repo,
    title: '✨ Welcome to Miyabi!',
    body: `# 自律型開発へようこそ！🤖

あなたのプロジェクトは **Miyabi** で動いています - 完全自動化されたAI開発フレームワークです。

## ✨ 提供される機能

- **6つのAIエージェント** があなたのIssueに取り組みます
- **自動 Issue → PR パイプライン** （手動コーディング不要）
- **ラベルベースのステートマシン** で進捗管理
- **リアルタイム監視** via GitHub Projects

## 🚀 使い方

### ステップ1: Issueを作成

作りたいものを記述するだけ:

\`\`\`bash
gh issue create --title "ユーザー認証を追加" --body "メール/パスワードでログイン機能を実装"
\`\`\`

### ステップ2: 待つ（本当にそれだけ）

エージェントが自動的に:
1. **分析** - Issueを解析してラベル付け
2. **分解** - タスクをステップに分割
3. **実装** - 機能を実装
4. **レビュー** - コード品質をチェック
5. **PR作成** - Pull Requestを作成

10-15分でPRが完成します！✨

### ステップ3: レビューとマージ

- PRを確認
- 必要に応じて変更を依頼
- 準備ができたらマージ
- エージェントが自動でデプロイ

## 📊 進捗を確認

### CLI経由
\`\`\`bash
npx miyabi

# ステータス確認を選択
# ウォッチモードで自動更新も可能
\`\`\`

### GitHub経由
- **Issues タブ**: ステートラベルを確認 (pending → analyzing → implementing → reviewing → done)
- **Projects タブ**: エージェントのアサインとメトリクスを表示
- **Actions タブ**: ワークフローをリアルタイムで監視

## 🏷️ ステートラベル

Issueは自動的に状態を遷移します:

- \`📥 state:pending\` - エージェント割り当て待ち
- \`🔍 state:analyzing\` - 分析中
- \`🏗️ state:implementing\` - 実装中
- \`👀 state:reviewing\` - レビュー中
- \`✅ state:done\` - 完了・マージ済み

## 🤖 エージェントの種類

各エージェントには専門の役割があります:

- **CoordinatorAgent** - タスク管理と計画
- **CodeGenAgent** - コード実装
- **ReviewAgent** - 品質チェックとテスト
- **IssueAgent** - Issue分析とラベリング
- **PRAgent** - Pull Request管理
- **DeploymentAgent** - 本番デプロイ

エージェントの手動割り当ては不要です - すべて自動！

## 💡 ヒント

### 良い結果を得るために
- Issue の説明は具体的に
- 大きな機能は小さな Issue に分割
- ラベルで優先度を設定 (P0-Critical, P1-High, など)
- PR は迅速にレビューしてエージェントを動かし続ける

### よくあるパターン

**機能開発:**
\`\`\`bash
gh issue create --title "ダークモードトグルを追加" \\
  --body "設定画面にテーマを切り替えるトグルボタンを作成"
\`\`\`

**バグ修正:**
\`\`\`bash
gh issue create --title "ログインリダイレクトループを修正" \\
  --body "ログイン成功後、リダイレクトループに陥る" \\
  --label "🐛 type:bug"
\`\`\`

**ドキュメント:**
\`\`\`bash
gh issue create --title "APIエンドポイントをドキュメント化" \\
  --body "すべてのAPIルートハンドラーにJSDocコメントを追加" \\
  --label "📚 type:docs"
\`\`\`

## 🔧 設定

すべての設定は \`.github/\` にあります:
- \`labels.yml\` - 53個のラベル定義
- \`workflows/\` - GitHub Actions 自動化
- \`WORKFLOW_RULES.md\` - 開発ガイドライン

## 📚 ドキュメント

- [README](https://github.com/ShunsukeHayashi/Autonomous-Operations#readme)
- [Miyabi npm package](https://www.npmjs.com/package/miyabi)

## 🆘 ヘルプが必要？

- ステータス確認: \`npx miyabi\` でステータス確認を選択
- ログを表示: GitHub Actions タブを確認
- 問題を報告: [Miyabi Issues](https://github.com/ShunsukeHayashi/Autonomous-Operations/issues)

## 🎯 今すぐ試してみよう！

この Issue をクローズして、最初の本当のタスクを作成:

\`\`\`bash
gh issue create --title "あなたのタスク" --body "作りたいものを説明"
\`\`\`

そして魔法が起こるのを見よう！🪄

---

**プロヒント:** この Issue は今すぐクローズして構いません。システムの動作を示すデモでした。

✨ Generated by Miyabi`,
    labels: ['📚 type:docs', '👋 good-first-issue'],
  });

  return {
    number: data.number,
    html_url: data.html_url,
  };
}
