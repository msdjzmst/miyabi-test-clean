/**
 * E2E Test Harness
 *
 * Miyabi自律型開発環境のエンドツーエンドテストフレームワーク
 *
 * Phase 8-3: Real API Integration Support
 */
import { CoordinatorAgent } from "../agents/CoordinatorAgent.js";
import { IssueAgent } from "../agents/IssueAgent.js";
import { CodeGenAgent } from "../agents/CodeGenAgent.js";
import { ReviewAgent } from "../agents/ReviewAgent.js";
import { PRAgent } from "../agents/PRAgent.js";
import { TestAgent } from "../agents/TestAgent.js";
import { AnthropicClient } from "../clients/AnthropicClient.js";
import { GitHubClient } from "../clients/GitHubClient.js";
/**
 * E2E Test Harness
 *
 * Agent間の統合フローをテストする
 *
 * Phase 8-3: Supports both mock and real API modes
 */
export class E2ETestHarness {
    coordinatorAgent;
    issueAgent;
    codeGenAgent;
    reviewAgent;
    prAgent;
    testAgent;
    config;
    constructor(config = {}) {
        this.config = config;
        if (config.useRealAPI && (config.anthropicApiKey || config.githubToken)) {
            // Real API mode: Initialize agents with API clients
            const anthropicClient = config.anthropicApiKey
                ? new AnthropicClient(config.anthropicApiKey)
                : undefined;
            const githubClient = config.githubToken
                ? new GitHubClient(config.githubToken)
                : undefined;
            this.coordinatorAgent = new CoordinatorAgent();
            this.issueAgent = new IssueAgent({
                anthropicApiKey: config.anthropicApiKey,
                githubToken: config.githubToken,
            });
            this.codeGenAgent = new CodeGenAgent({
                anthropicApiKey: config.anthropicApiKey,
                githubToken: config.githubToken,
            });
            this.reviewAgent = new ReviewAgent({
                anthropicApiKey: config.anthropicApiKey,
            });
            this.prAgent = new PRAgent({
                githubToken: config.githubToken,
            });
            this.testAgent = new TestAgent();
            console.log(`[E2E] Initialized with REAL API mode (Repo: ${config.testOwner}/${config.testRepo})`);
        }
        else {
            // Mock mode (default)
            this.coordinatorAgent = new CoordinatorAgent();
            this.issueAgent = new IssueAgent();
            this.codeGenAgent = new CodeGenAgent();
            this.reviewAgent = new ReviewAgent();
            this.prAgent = new PRAgent();
            this.testAgent = new TestAgent();
            console.log("[E2E] Initialized with MOCK mode");
        }
    }
    /**
     * シナリオ実行
     */
    async runScenario(scenario) {
        const startTime = Date.now();
        const errors = [];
        const warnings = [];
        let qualityScore;
        let coverage;
        let prNumber;
        let prUrl;
        let tasksCreated = 0;
        let parallelExecutions = 0;
        let budgetUsed = 0;
        try {
            console.log(`\n[E2E] Starting Scenario ${scenario.id}: ${scenario.name}`);
            // 1. IssueAgent: Issue分析
            console.log("[E2E] Step 1: IssueAgent analyzing issue...");
            const issueResult = await this.issueAgent.analyze({
                issueNumber: scenario.id,
                repository: this.config.testRepo || "miyabi-test",
                owner: this.config.testOwner || "test-user",
                useRealAPI: this.config.useRealAPI,
            });
            if (!issueResult.success || !issueResult.data) {
                errors.push("IssueAgent failed to analyze issue");
                return this.createFailedResult(scenario, startTime, errors, warnings);
            }
            // 検証: 複雑度、優先度、タイプ
            if (issueResult.data.complexity !== scenario.expectedComplexity) {
                warnings.push(`Complexity mismatch: expected ${scenario.expectedComplexity}, got ${issueResult.data.complexity}`);
            }
            // 2. CoordinatorAgent: タスク分解とDAG生成
            console.log("[E2E] Step 2: CoordinatorAgent creating DAG...");
            const coordResult = await this.coordinatorAgent.execute({
                issueNumber: scenario.id,
                repository: this.config.testRepo || "miyabi-test",
                owner: this.config.testOwner || "test-user",
            });
            if (!coordResult.success || !coordResult.data) {
                errors.push("CoordinatorAgent failed to create DAG");
                return this.createFailedResult(scenario, startTime, errors, warnings);
            }
            tasksCreated = coordResult.data.taskGraph.nodes.length;
            parallelExecutions = coordResult.data.parallelGroups.length;
            console.log(`[E2E] DAG created: ${tasksCreated} tasks, ${parallelExecutions} parallel groups`);
            // 3. CodeGenAgent: コード生成
            console.log("[E2E] Step 3: CodeGenAgent generating code...");
            const codeGenResult = await this.codeGenAgent.generate({
                taskId: "e2e-test",
                requirements: scenario.issueBody,
                context: {
                    repository: this.config.testRepo || "miyabi-test",
                    owner: this.config.testOwner || "test-user",
                    baseBranch: "main",
                    relatedFiles: [],
                },
                useRealAPI: this.config.useRealAPI,
            });
            if (!codeGenResult.success || !codeGenResult.data) {
                errors.push("CodeGenAgent failed to generate code");
                return this.createFailedResult(scenario, startTime, errors, warnings);
            }
            console.log(`[E2E] Code generated: ${codeGenResult.data.files.length} files`);
            // 4. ReviewAgent: 品質チェック
            console.log("[E2E] Step 4: ReviewAgent reviewing code...");
            const reviewResult = await this.reviewAgent.review({
                files: codeGenResult.data.files,
                standards: {
                    minQualityScore: scenario.successCriteria.minQualityScore || 80,
                    requireTests: true,
                    securityScan: scenario.successCriteria.requiresSecurityScan || false,
                },
                useRealAPI: this.config.useRealAPI,
            });
            if (!reviewResult.success || !reviewResult.data) {
                errors.push("ReviewAgent failed to review code");
                return this.createFailedResult(scenario, startTime, errors, warnings);
            }
            qualityScore = reviewResult.data.qualityScore;
            coverage = reviewResult.data.coverage;
            console.log(`[E2E] Review complete: Quality ${qualityScore}/100, Coverage ${coverage}%`);
            // 品質基準チェック
            if (!reviewResult.data.passed) {
                errors.push(`Quality score ${qualityScore} below threshold ${scenario.successCriteria.minQualityScore || 80}`);
            }
            if (scenario.successCriteria.minCoverage &&
                coverage < scenario.successCriteria.minCoverage) {
                errors.push(`Coverage ${coverage}% below threshold ${scenario.successCriteria.minCoverage}%`);
            }
            // 5. TestAgent: テスト実行（該当する場合）
            if (codeGenResult.data.tests.length > 0) {
                console.log("[E2E] Step 5: TestAgent running tests...");
                const testResult = await this.testAgent.run({
                    repository: this.config.testRepo || "miyabi-test",
                    owner: this.config.testOwner || "test-user",
                    branch: "e2e-test",
                });
                if (!testResult.success || !testResult.data) {
                    warnings.push("TestAgent failed to run tests");
                }
                else {
                    console.log(`[E2E] Tests complete: ${testResult.data.passedTests}/${testResult.data.totalTests} passed`);
                }
            }
            // 6. PRAgent: PR作成
            console.log("[E2E] Step 6: PRAgent creating PR...");
            const prResult = await this.prAgent.create({
                issueNumber: scenario.id,
                repository: this.config.testRepo || "miyabi-test",
                owner: this.config.testOwner || "test-user",
                files: codeGenResult.data.files,
                qualityReport: reviewResult.data,
                useRealAPI: this.config.useRealAPI,
            });
            if (!prResult.success || !prResult.data) {
                errors.push("PRAgent failed to create PR");
                return this.createFailedResult(scenario, startTime, errors, warnings);
            }
            prNumber = prResult.data.number;
            prUrl = prResult.data.url;
            console.log(`[E2E] PR created: ${prUrl}`);
            // 成功判定
            const duration = Date.now() - startTime;
            const success = errors.length === 0;
            // 実行時間チェック
            if (scenario.successCriteria.maxDurationMs &&
                duration > scenario.successCriteria.maxDurationMs) {
                warnings.push(`Duration ${duration}ms exceeds threshold ${scenario.successCriteria.maxDurationMs}ms`);
            }
            return {
                scenarioId: scenario.id,
                scenarioName: scenario.name,
                success,
                duration,
                qualityScore,
                coverage,
                prNumber,
                prUrl,
                errors,
                warnings,
                metrics: {
                    tasksCreated,
                    parallelExecutions,
                    budgetUsed,
                },
            };
        }
        catch (error) {
            errors.push(`Unexpected error: ${error instanceof Error ? error.message : String(error)}`);
            return this.createFailedResult(scenario, startTime, errors, warnings);
        }
    }
    /**
     * 失敗結果を作成
     */
    createFailedResult(scenario, startTime, errors, warnings) {
        return {
            scenarioId: scenario.id,
            scenarioName: scenario.name,
            success: false,
            duration: Date.now() - startTime,
            errors,
            warnings,
            metrics: {
                tasksCreated: 0,
                parallelExecutions: 0,
                budgetUsed: 0,
            },
        };
    }
    /**
     * 全シナリオ実行
     */
    async runAllScenarios(scenarios) {
        const results = [];
        for (const scenario of scenarios) {
            const result = await this.runScenario(scenario);
            results.push(result);
            // 結果表示
            this.printResult(result);
        }
        // 総合レポート
        this.printSummary(results);
        return results;
    }
    /**
     * 結果表示
     */
    printResult(result) {
        const status = result.success ? "✅ PASSED" : "❌ FAILED";
        console.log(`\n[E2E] Scenario ${result.scenarioId}: ${status}`);
        console.log(`  Duration: ${(result.duration / 1000).toFixed(2)}s`);
        if (result.qualityScore !== undefined) {
            console.log(`  Quality Score: ${result.qualityScore}/100`);
        }
        if (result.coverage !== undefined) {
            console.log(`  Coverage: ${result.coverage}%`);
        }
        if (result.prUrl) {
            console.log(`  PR: ${result.prUrl}`);
        }
        if (result.errors.length > 0) {
            console.log(`  Errors:`);
            result.errors.forEach((err) => console.log(`    - ${err}`));
        }
        if (result.warnings.length > 0) {
            console.log(`  Warnings:`);
            result.warnings.forEach((warn) => console.log(`    - ${warn}`));
        }
    }
    /**
     * 総合レポート表示
     */
    printSummary(results) {
        const passedCount = results.filter((r) => r.success).length;
        const totalCount = results.length;
        const passRate = (passedCount / totalCount) * 100;
        const separator = "=".repeat(60);
        console.log(`\n${separator}`);
        console.log(`E2E Test Summary`);
        console.log(`${separator}`);
        console.log(`Total Scenarios: ${totalCount}`);
        console.log(`Passed: ${passedCount}`);
        console.log(`Failed: ${totalCount - passedCount}`);
        console.log(`Pass Rate: ${passRate.toFixed(1)}%`);
        console.log(`\nSuccess Criteria: ${passedCount}/${totalCount} ≥ 5/6`);
        console.log(passedCount >= 5 ? "✅ OVERALL: PASSED" : "❌ OVERALL: FAILED");
        console.log(`${separator}\n`);
    }
}
//# sourceMappingURL=E2ETestHarness.js.map