/**
 * E2E Test Runner - Real API Mode
 *
 * Phase 8-3: Integration testing with real Claude Sonnet 4 and GitHub APIs
 *
 * Usage:
 *   ANTHROPIC_API_KEY=sk-ant-xxx \
 *   GITHUB_TOKEN=ghp_xxx \
 *   TEST_REPO=miyabi-e2e-test \
 *   TEST_OWNER=ShunsukeHayashi \
 *   npm run test:e2e:real
 *
 *   Or run specific scenario:
 *   npm run test:e2e:real -- --scenario 1
 */
import { E2ETestHarness } from "./E2ETestHarness.js";
import { scenarios } from "./scenarios.js";
async function main() {
    // Parse command line arguments
    const args = process.argv.slice(2);
    const scenarioIndex = args.findIndex((arg) => arg === "--scenario");
    const specificScenario = scenarioIndex !== -1 ? parseInt(args[scenarioIndex + 1], 10) : null;
    // Load configuration from environment variables
    const config = {
        useRealAPI: true,
        anthropicApiKey: process.env.ANTHROPIC_API_KEY,
        githubToken: process.env.GITHUB_TOKEN,
        testRepo: process.env.TEST_REPO,
        testOwner: process.env.TEST_OWNER,
    };
    // Validate configuration
    if (!config.anthropicApiKey) {
        console.error("❌ ERROR: ANTHROPIC_API_KEY environment variable is required");
        console.error("   Set it with: export ANTHROPIC_API_KEY=sk-ant-your-key-here");
        process.exit(1);
    }
    if (!config.githubToken) {
        console.error("❌ ERROR: GITHUB_TOKEN environment variable is required");
        console.error("   Set it with: export GITHUB_TOKEN=ghp_your-token-here");
        process.exit(1);
    }
    if (!config.testRepo) {
        console.error("❌ ERROR: TEST_REPO environment variable is required");
        console.error("   Set it with: export TEST_REPO=your-test-repo-name");
        console.error("   Example: export TEST_REPO=miyabi-e2e-test (repository name only, not full URL)");
        process.exit(1);
    }
    if (!config.testOwner) {
        console.error("❌ ERROR: TEST_OWNER environment variable is required");
        console.error("   Set it with: export TEST_OWNER=your-github-username-or-org");
        console.error("   Example: export TEST_OWNER=ShunsukeHayashi");
        process.exit(1);
    }
    console.log("\n" + "=".repeat(70));
    console.log("🚀 Miyabi E2E Tests - REAL API Mode");
    console.log("=".repeat(70));
    console.log(`Repository: ${config.testOwner}/${config.testRepo}`);
    console.log(`Anthropic API: ${config.anthropicApiKey.substring(0, 15)}...`);
    console.log(`GitHub Token: ${config.githubToken.substring(0, 15)}...`);
    console.log("=".repeat(70) + "\n");
    // Initialize test harness
    const harness = new E2ETestHarness(config);
    try {
        if (specificScenario !== null) {
            // Run specific scenario
            const scenario = scenarios.find((s) => s.id === specificScenario);
            if (!scenario) {
                console.error(`❌ ERROR: Scenario ${specificScenario} not found. Available scenarios: ${scenarios.map((s) => s.id).join(", ")}`);
                process.exit(1);
            }
            console.log(`Running single scenario: ${scenario.id} - ${scenario.name}\n`);
            const result = await harness.runScenario(scenario);
            // Exit with appropriate code
            process.exit(result.success ? 0 : 1);
        }
        else {
            // Run all scenarios
            console.log(`Running ${scenarios.length} scenarios...\n`);
            const results = await harness.runAllScenarios(scenarios);
            // Check pass rate
            const passedCount = results.filter((r) => r.success).length;
            const passRate = (passedCount / results.length) * 100;
            // Exit with appropriate code (success if ≥5/6 pass)
            const overallSuccess = passedCount >= 5;
            process.exit(overallSuccess ? 0 : 1);
        }
    }
    catch (error) {
        console.error("\n❌ FATAL ERROR:");
        console.error(error);
        process.exit(1);
    }
}
// Run if executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch((error) => {
        console.error("Unhandled error:", error);
        process.exit(1);
    });
}
export { main };
//# sourceMappingURL=run-e2e-real.js.map