/**
 * E2E Test Scenarios
 *
 * 6つの包括的テストシナリオ定義
 */
export const scenarios = [
    // シナリオ1: 単純バグ修正（small complexity）
    {
        id: 1,
        name: "単純バグ修正",
        description: "基本的なIssue→PRフローの動作確認",
        issueTitle: "🐛 Bug: Fix typo in README.md",
        issueBody: `READMEの3行目に "Codx" という typo があります。
正しくは "Codex" です。

## Expected
- Codex

## Actual
- Codx`,
        expectedComplexity: "small",
        expectedPriority: "P2",
        expectedType: "bug",
        successCriteria: {
            minQualityScore: 70, // Lowered to 70 for simple README fixes (Claude API variability)
            maxDurationMs: 5 * 60 * 1000, // 5分
        },
    },
    // シナリオ2: 中規模機能追加（medium complexity）
    {
        id: 5, // GitHub Issue #5
        name: "中規模機能追加",
        description: "タスク分解とコード生成の精度確認",
        issueTitle: "✨ Feature: Add dark mode toggle to settings",
        issueBody: `## Description
設定画面にダークモード切り替えボタンを追加してください。

## Requirements
1. Settings.tsx にトグルボタンを追加
2. LocalStorageにダークモード状態を保存
3. アプリ全体にダークモードを適用
4. テストを追加

## Acceptance Criteria
- [ ] ボタンクリックでダークモード切り替え
- [ ] リロード後も状態が保持される
- [ ] カバレッジ ≥ 80%`,
        expectedComplexity: "medium",
        expectedPriority: "P1",
        expectedType: "feature",
        successCriteria: {
            minQualityScore: 80,
            minCoverage: 80,
            maxDurationMs: 15 * 60 * 1000, // 15分
        },
    },
    // シナリオ3: 大規模リファクタリング（large complexity）
    {
        id: 6, // GitHub Issue #6
        name: "大規模リファクタリング",
        description: "複雑なタスク分解と品質ゲートの動作確認",
        issueTitle: "♻️ Refactor: Migrate class components to hooks",
        issueBody: `## Description
src/components/ 配下のすべてのクラスコンポーネントをReact Hooksに移行してください。

## Scope
- UserProfile.tsx (200行)
- Dashboard.tsx (350行)
- Settings.tsx (150行)

## Requirements
1. useState, useEffect, useContext を使用
2. 既存の機能を維持
3. テストもHooksに対応
4. 品質スコア ≥ 85点`,
        expectedComplexity: "large",
        expectedPriority: "P1",
        expectedType: "refactor",
        successCriteria: {
            minQualityScore: 85,
            minCoverage: 80,
            maxDurationMs: 30 * 60 * 1000, // 30分
        },
    },
    // シナリオ4: セキュリティ脆弱性（P0-Critical）
    {
        id: 7, // GitHub Issue #7
        name: "セキュリティ脆弱性",
        description: "優先度判定とセキュリティスキャンの動作確認",
        issueTitle: "🔥 Security: Fix SQL injection vulnerability",
        issueBody: `## Severity: P0-Critical

src/api/users.ts の getUserById() 関数でSQL injectionの脆弱性を発見しました。

## Vulnerable Code
\`\`\`typescript
const query = \`SELECT * FROM users WHERE id = \${userId}\`;
\`\`\`

## Expected Fix
- Prepared statementを使用
- 入力バリデーション追加
- セキュリティテスト追加`,
        expectedComplexity: "small",
        expectedPriority: "P0",
        expectedType: "bug",
        successCriteria: {
            minQualityScore: 90,
            requiresSecurityScan: true,
            maxDurationMs: 10 * 60 * 1000, // 10分
        },
    },
    // シナリオ5: 経済Circuit Breaker（予算超過）
    {
        id: 8, // GitHub Issue #8
        name: "経済Circuit Breaker",
        description: "予算管理と緊急停止の動作確認",
        issueTitle: "🧪 Test: Budget management",
        issueBody: `## Test Purpose
経済Circuit Breakerの動作確認

月間予算$10で大量のIssue処理をシミュレート

## Expected Behavior
- 80%到達: ⚠️ 警告ログ
- 100%到達: ❌ 新規実行拒否
- 150%到達: 🚨 緊急停止`,
        expectedComplexity: "small",
        expectedPriority: "P2",
        expectedType: "test",
        successCriteria: {
            budgetThresholds: {
                warning: 0.8,
                reject: 1.0,
                emergency: 1.5,
            },
        },
    },
    // シナリオ6: 並列実行ストレステスト
    {
        id: 9, // GitHub Issue #9
        name: "並列実行ストレステスト",
        description: "並列実行数制御とDAG依存関係の検証",
        issueTitle: "🏗️ Feature: Complete authentication system",
        issueBody: `以下の機能を実装してください:

1. User model実装
2. Login API実装（depends on 1）
3. Register API実装（depends on 1）
4. Password reset API実装（depends on 1, 2）
5. Email verification実装（depends on 3）
6. 2FA実装（depends on 2）

依存関係:
- 2, 3 → 1
- 4 → 1, 2
- 5 → 3
- 6 → 2`,
        expectedComplexity: "xlarge",
        expectedPriority: "P0",
        expectedType: "feature",
        successCriteria: {
            minQualityScore: 80,
            minCoverage: 75,
            maxDurationMs: 45 * 60 * 1000, // 45分
        },
    },
];
//# sourceMappingURL=scenarios.js.map