/**
 * CoordinatorAgent - 最上位意思決定Agent
 *
 * 識学理論適用:
 * - 責任: タスク全体の統括と並列実行制御
 * - 権限: 他Agentへのタスク委譲、並列実行数決定、Critical Path判定
 * - 階層: Coordinator Layer（最上位）
 */
import type { DAG, AgentInput, AgentOutput } from "../types.js";
export interface CoordinatorInput extends AgentInput {
    issueNumber: number;
    repository: string;
    owner: string;
}
export interface CoordinatorOutput extends AgentOutput {
    data?: {
        taskGraph: DAG;
        criticalPath: string[];
        parallelGroups: string[][];
        estimatedDuration: number;
    };
}
/**
 * CoordinatorAgent実装
 *
 * タスク分解 → DAG生成 → Critical Path特定 → 並列実行制御
 */
export declare class CoordinatorAgent {
    private maxConcurrency;
    /**
     * メイン実行ロジック
     */
    execute(input: CoordinatorInput): Promise<CoordinatorOutput>;
    /**
     * Issue分析（現時点ではモック - IssueAgent実装後に置き換え）
     */
    private analyzeIssue;
    /**
     * DAG生成ロジック
     *
     * IssueDataから依存関係グラフを生成
     */
    private generateDAG;
    /**
     * DAG検証（循環依存チェック）
     */
    private validateDAG;
    /**
     * Critical Path特定
     *
     * トポロジカルソート + 動的計画法で最長経路を探索
     */
    private findCriticalPath;
    /**
     * トポロジカルソート（Kahn's Algorithm）
     */
    private topologicalSort;
    /**
     * 並列実行可能なタスクをグループ化
     */
    private groupParallelizable;
    /**
     * 推定時間計算（Critical Pathの合計時間）
     */
    private calculateDuration;
}
//# sourceMappingURL=CoordinatorAgent.d.ts.map