/**
 * GitHubClient - GitHub API wrapper for Agent SDK
 *
 * Phase 8-2: Real GitHub API integration
 */
import { Octokit } from "@octokit/rest";
/**
 * GitHubClient for Agent SDK
 *
 * Provides GitHub API integration for:
 * - Issue operations (IssueAgent)
 * - File operations (CodeGenAgent)
 * - PR operations (PRAgent)
 */
export class GitHubClient {
    octokit;
    constructor(token) {
        const authToken = token || process.env.GITHUB_TOKEN;
        if (!authToken) {
            throw new Error("GITHUB_TOKEN is required. Set it as environment variable or pass to constructor.");
        }
        this.octokit = new Octokit({ auth: authToken });
    }
    /**
     * Get Issue from GitHub
     *
     * Used by IssueAgent for real issue data
     */
    async getIssue(owner, repo, issueNumber) {
        try {
            const { data } = await this.octokit.issues.get({
                owner,
                repo,
                issue_number: issueNumber,
            });
            console.log(`[GitHubClient] Fetched issue #${issueNumber}: ${data.title}`);
            return {
                number: data.number,
                title: data.title,
                body: data.body || null,
                state: data.state,
                labels: data.labels,
                created_at: data.created_at,
                updated_at: data.updated_at,
            };
        }
        catch (error) {
            console.error(`[GitHubClient] Failed to fetch issue #${issueNumber}:`, error);
            throw new Error(`Failed to fetch issue #${issueNumber}: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
    }
    /**
     * Add labels to Issue
     *
     * Used by IssueAgent for automatic label application
     */
    async addLabels(owner, repo, issueNumber, labels) {
        try {
            await this.octokit.issues.addLabels({
                owner,
                repo,
                issue_number: issueNumber,
                labels,
            });
            console.log(`[GitHubClient] Added labels to #${issueNumber}:`, labels);
        }
        catch (error) {
            console.error(`[GitHubClient] Failed to add labels to #${issueNumber}:`, error);
            throw new Error(`Failed to add labels: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
    }
    /**
     * Get file content from repository
     *
     * Used by CodeGenAgent for context gathering
     */
    async getFileContent(owner, repo, path, ref = "main") {
        try {
            const { data } = await this.octokit.repos.getContent({
                owner,
                repo,
                path,
                ref,
            });
            if (Array.isArray(data) || data.type !== "file") {
                console.warn(`[GitHubClient] Path is not a file: ${path}`);
                return null;
            }
            const content = Buffer.from(data.content, "base64").toString("utf-8");
            console.log(`[GitHubClient] Fetched file: ${path} (${data.sha})`);
            return {
                path: data.path,
                content,
                sha: data.sha,
            };
        }
        catch (error) {
            console.error(`[GitHubClient] Failed to fetch file ${path}:`, error);
            return null;
        }
    }
    /**
     * Create branch
     *
     * Used by PRAgent for PR creation
     */
    async createBranch(owner, repo, branchName, baseBranch = "main") {
        try {
            // Get base branch ref
            const { data: baseRef } = await this.octokit.git.getRef({
                owner,
                repo,
                ref: `heads/${baseBranch}`,
            });
            // Create new branch
            await this.octokit.git.createRef({
                owner,
                repo,
                ref: `refs/heads/${branchName}`,
                sha: baseRef.object.sha,
            });
            console.log(`[GitHubClient] Created branch: ${branchName} from ${baseBranch}`);
        }
        catch (error) {
            console.error(`[GitHubClient] Failed to create branch ${branchName}:`, error);
            throw new Error(`Failed to create branch: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
    }
    /**
     * Commit files to branch using Git Tree API
     *
     * Used by PRAgent for committing generated code
     */
    async commitFiles(params) {
        try {
            // 1. Get current commit SHA
            const { data: ref } = await this.octokit.git.getRef({
                owner: params.owner,
                repo: params.repo,
                ref: `heads/${params.branch}`,
            });
            const currentCommitSha = ref.object.sha;
            // 2. Get current commit to access its tree
            const { data: currentCommit } = await this.octokit.git.getCommit({
                owner: params.owner,
                repo: params.repo,
                commit_sha: currentCommitSha,
            });
            // 3. Create blobs for each file
            const blobs = await Promise.all(params.files.map((file) => this.octokit.git.createBlob({
                owner: params.owner,
                repo: params.repo,
                content: Buffer.from(file.content).toString("base64"),
                encoding: "base64",
            })));
            // 4. Create tree
            const { data: tree } = await this.octokit.git.createTree({
                owner: params.owner,
                repo: params.repo,
                tree: params.files.map((file, i) => ({
                    path: file.path,
                    mode: "100644",
                    type: "blob",
                    sha: blobs[i].data.sha,
                })),
                base_tree: currentCommit.tree.sha,
            });
            // 5. Create commit
            const { data: commit } = await this.octokit.git.createCommit({
                owner: params.owner,
                repo: params.repo,
                message: params.message,
                tree: tree.sha,
                parents: [currentCommitSha],
            });
            // 6. Update ref
            await this.octokit.git.updateRef({
                owner: params.owner,
                repo: params.repo,
                ref: `heads/${params.branch}`,
                sha: commit.sha,
            });
            console.log(`[GitHubClient] Committed ${params.files.length} files to ${params.branch}: ${commit.sha}`);
            return commit.sha;
        }
        catch (error) {
            console.error(`[GitHubClient] Failed to commit files to ${params.branch}:`, error);
            throw new Error(`Failed to commit files: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
    }
    /**
     * Create Pull Request
     *
     * Used by PRAgent for Draft PR creation
     */
    async createPullRequest(params) {
        try {
            const { data } = await this.octokit.pulls.create({
                owner: params.owner,
                repo: params.repo,
                title: params.title,
                body: params.body,
                head: params.head,
                base: params.base,
                draft: params.draft !== false, // Default to draft
            });
            console.log(`[GitHubClient] Created ${params.draft ? "Draft " : ""}PR #${data.number}: ${data.html_url}`);
            return {
                number: data.number,
                html_url: data.html_url,
                state: data.state,
            };
        }
        catch (error) {
            console.error("[GitHubClient] Failed to create PR:", error);
            throw new Error(`Failed to create PR: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
    }
    /**
     * Add comment to Issue/PR
     *
     * Used by Agents for status updates
     */
    async addComment(owner, repo, issueNumber, comment) {
        try {
            await this.octokit.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body: comment,
            });
            console.log(`[GitHubClient] Added comment to #${issueNumber}`);
        }
        catch (error) {
            console.error(`[GitHubClient] Failed to add comment to #${issueNumber}:`, error);
            throw new Error(`Failed to add comment: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
    }
    /**
     * Check rate limit
     *
     * Used for Rate Limit monitoring
     */
    async checkRateLimit() {
        try {
            const { data } = await this.octokit.rateLimit.get();
            const result = {
                remaining: data.rate.remaining,
                limit: data.rate.limit,
                reset: new Date(data.rate.reset * 1000),
            };
            if (result.remaining < 100) {
                console.warn(`[GitHubClient] Rate limit low: ${result.remaining}/${result.limit} (resets at ${result.reset.toISOString()})`);
            }
            return result;
        }
        catch (error) {
            console.error("[GitHubClient] Failed to check rate limit:", error);
            throw new Error(`Failed to check rate limit: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
    }
    /**
     * Wait if rate limit is low
     *
     * Automatic rate limit protection
     */
    async waitIfNeeded() {
        const { remaining, reset } = await this.checkRateLimit();
        if (remaining < 100) {
            const waitMs = reset.getTime() - Date.now();
            if (waitMs > 0) {
                console.warn(`[GitHubClient] Waiting ${Math.ceil(waitMs / 1000)}s for rate limit reset...`);
                await new Promise((resolve) => setTimeout(resolve, waitMs));
            }
        }
    }
}
//# sourceMappingURL=GitHubClient.js.map