/**
 * Claude Code Client
 *
 * Phase 9: Integration with Claude Code CLI
 *
 * This client replaces AnthropicClient by using the local Claude Code CLI
 * instead of calling external Anthropic API.
 *
 * Usage:
 *   const client = new ClaudeCodeClient();
 *   const response = await client.executePrompt("Analyze this issue...");
 */
export interface ClaudeCodeResponse {
    content: string;
    tokensUsed?: {
        input: number;
        output: number;
    };
    cost?: number;
}
export declare class ClaudeCodeClient {
    private codexCommand;
    constructor(codexCommand?: string);
    /**
     * Execute a prompt using Claude Code CLI
     *
     * @param prompt - The prompt to execute
     * @param options - Additional options
     * @returns The response from Claude Code
     */
    executePrompt(prompt: string, options?: {
        timeout?: number;
        workingDir?: string;
    }): Promise<ClaudeCodeResponse>;
    /**
     * Analyze a GitHub issue using Claude Code
     *
     * @param issueData - Issue data to analyze
     * @returns Analysis result
     */
    analyzeIssue(issueData: {
        title: string;
        body: string;
        number: number;
    }): Promise<{
        type: string;
        complexity: string;
        priority: string;
        relatedFiles: string[];
        labels: string[];
    }>;
    /**
     * Generate code using Claude Code
     *
     * @param requirements - Code generation requirements
     * @returns Generated files
     */
    generateCode(requirements: {
        taskId: string;
        requirements: string;
        context: string;
        language: string;
    }): Promise<{
        files: Array<{
            path: string;
            content: string;
            action: "create" | "modify" | "delete";
        }>;
        tests: Array<{
            path: string;
            content: string;
            action: "create" | "modify" | "delete";
        }>;
        qualityScore: number;
    }>;
    /**
     * Review code using Claude Code
     *
     * @param files - Files to review
     * @returns Review result
     */
    reviewCode(files: Array<{
        path: string;
        content: string;
    }>): Promise<{
        qualityScore: number;
        passed: boolean;
        issues: Array<{
            severity: string;
            message: string;
            file?: string;
            line?: number;
        }>;
        suggestions: string[];
    }>;
}
//# sourceMappingURL=ClaudeCodeClient.d.ts.map